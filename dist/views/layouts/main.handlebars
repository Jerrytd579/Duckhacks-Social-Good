<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>{{title}}</title>
    <link rel="stylesheet" href="/public/css/site.css">
      <script type="text/javascript">
          // set the pyodide files URL (packages.json, pyodide.asm.data etc)
          window.languagePluginUrl = 'https://pyodide-cdn2.iodide.io/v0.15.0/full/';
      </script>
      <script src="https://pyodide-cdn2.iodide.io/v0.15.0/full/pyodide.js"></script>
</head>
<body>
        {{{body}}}
        <script type="text/javascript">
          languagePluginLoader.then(function () {
              console.log(pyodide.runPython(`
                  import sys
                  sys.version
              `));
              console.log(pyodide.runPython('print(1 + 2)'));
              let result = pyodide.loadPackage('nltk').then(() => {`
import pickle
import re
import nltk
from nltk.corpus import stopwords, wordnet
from nltk.stem import WordNetLemmatizer
class LemmaTokenizer:
    def __init__(self):
        self.wnl = WordNetLemmatizer()
        self.stopwords = stopwords.words('english')
        self.pos_map = {
            'J': wordnet.ADJ,
            'V': wordnet.VERB,
            'R': wordnet.ADV,
        }
        self.token = re.compile(r'^[a-zA-Z]{3,}$')

    def __call__(self, articles):
        # Remove stopwords (and, if, the, a, etc.)
        words = filter(lambda w: w not in self.stopwords, nltk.word_tokenize(articles))
        # Get part of speech for lemmas
        tagged = nltk.pos_tag(list(words))
        # Only keep characters a-z
        tokens = filter(lambda w: self.token.match(w[0]), tagged)
        return [self.wnl.lemmatize(word, pos=self.pos_map.get(pos[0], wordnet.NOUN)) for word, pos in tokens]

vectorizer = pickle.load(open('vectorizer.pk', 'rb'))
classifier = pickle.load(open('classifier.pk', 'rb'))

def predict(text: str) -> float:
    """Given a string of text, performs a sentiment analysis and returns a score of [0,1].
    The model's data is vectorized using TF-IDF, and learns using a Bagging Classifier model."""
    data = vectorizer.transform([text])
    return classifier.predict_proba(data)[0][1]
print(predict("black"))`
          });
          console.log(result);
    </script>
</body>
</html>